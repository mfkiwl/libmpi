/*
 * MIT License
 *
 * Copyright(c) 2011-2020 The Maintainers of Nanvix
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef NANVIX_MPI_DATATYPE_PREDEFINED_H_
#define NANVIX_MPI_DATATYPE_PREDEFINED_H_

#include <mpi.h>

#define MPI_DATATYPE_CHAR                  0
#define MPI_DATATYPE_SHORT                 1
#define MPI_DATATYPE_INT                   2
#define MPI_DATATYPE_LONG                  3
#define MPI_DATATYPE_LONG_LONG_INT         4
#define MPI_DATATYPE_LONG_LONG             5
#define MPI_DATATYPE_SIGNED_CHAR           6
#define MPI_DATATYPE_UNSIGNED_CHAR         7
#define MPI_DATATYPE_UNSIGNED_SHORT        8
#define MPI_DATATYPE_UNSIGNED              9
#define MPI_DATATYPE_UNSIGNED_LONG         10
#define MPI_DATATYPE_UNSIGNED_LONG_LONG    11
#define MPI_DATATYPE_FLOAT                 12
#define MPI_DATATYPE_DOUBLE                13
#define MPI_DATATYPE_LONG_DOUBLE           14
#define MPI_DATATYPE_WCHAR                 15
#define MPI_DATATYPE_C_BOOL                16
#define MPI_DATATYPE_INT8_T                17
#define MPI_DATATYPE_INT16_T               18
#define MPI_DATATYPE_INT32_T               19
#define MPI_DATATYPE_INT64_T               20
#define MPI_DATATYPE_UINT8_T               21
#define MPI_DATATYPE_UINT16_T              22
#define MPI_DATATYPE_UINT32_T              23
#define MPI_DATATYPE_UINT64_T              24
#define MPI_DATATYPE_C_COMPLEX             25
#define MPI_DATATYPE_C_FLOAT_COMPLEX       26
#define MPI_DATATYPE_C_DOUBLE_COMPLEX      27
#define MPI_DATATYPE_C_LONG_DOUBLE_COMPLEX 28
#define MPI_DATATYPE_BYTE                  29
#define MPI_DATATYPE_PACKED                30
#define MPI_DATATYPE_AINT                  31
#define MPI_DATATYPE_OFFSET                32
#define MPI_DATATYPE_COUNT                 33

#define MPI_DATATYPE_MAX_PREDEFINED        34

#define MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(SIZE, NAME)		    \
	{	                                                            \
		.super = OBJ_STATIC_INIT(mpi_datatype_t),                   \
		.id    = MPI_DATATYPE_ ## NAME,                             \
		.size  = SIZE,                                              \
	}

#define MPI_DATATYPE_INITIALIZER_INT8   MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(int8_t), INT8_T)
#define MPI_DATATYPE_INITIALIZER_INT16  MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(int16_t), INT16_T)
#define MPI_DATATYPE_INITIALIZER_INT32  MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(int32_t), INT32_T)
#define MPI_DATATYPE_INITIALIZER_INT64  MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(int64_t), INT64_T)
#define MPI_DATATYPE_INITIALIZER_UINT8  MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(uint8_t), UINT8_T)
#define MPI_DATATYPE_INITIALIZER_UINT16 MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(uint16_t), UINT16_T)
#define MPI_DATATYPE_INITIALIZER_UINT32 MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(uint32_t), UINT32_T)
#define MPI_DATATYPE_INITIALIZER_UINT64 MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(uint64_t), UINT64_T)

#define MPI_DATATYPE_INITIALIZER_CHAR          MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(char), CHAR)
#define MPI_DATATYPE_INITIALIZER_SIGNED_CHAR   MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(signed char), SIGNED_CHAR)
#define MPI_DATATYPE_INITIALIZER_UNSIGNED_CHAR MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(unsigned char), UNSIGNED_CHAR)
#define MPI_DATATYPE_INITIALIZER_WCHAR         MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(wchar_t), WCHAR)

#define MPI_DATATYPE_INITIALIZER_SHORT              MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(short), SHORT)
#define MPI_DATATYPE_INITIALIZER_INT                MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(int), INT)
#define MPI_DATATYPE_INITIALIZER_LONG               MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(long), LONG)
#define MPI_DATATYPE_INITIALIZER_LONG_LONG          MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(long long), LONG_LONG)
#define MPI_DATATYPE_INITIALIZER_UNSIGNED_SHORT     MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(short), UNSIGNED_SHORT)
#define MPI_DATATYPE_INITIALIZER_UNSIGNED           MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(int), UNSIGNED)
#define MPI_DATATYPE_INITIALIZER_UNSIGNED_LONG      MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(long), UNSIGNED_LONG)
#define MPI_DATATYPE_INITIALIZER_UNSIGNED_LONG_LONG MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(long long), UNSIGNED_LONG_LONG)

#define MPI_DATATYPE_INITIALIZER_FLOAT       MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(float), FLOAT)
#define MPI_DATATYPE_INITIALIZER_DOUBLE      MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(double), DOUBLE)
#define MPI_DATATYPE_INITIALIZER_LONG_DOUBLE MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(long double), LONG_DOUBLE)

#define MPI_DATATYPE_INITIALIZER_C_BOOL                MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(_Bool), C_BOOL)
#define MPI_DATATYPE_INITIALIZER_C_COMPLEX             MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(float _Complex), C_COMPLEX)
#define MPI_DATATYPE_INITIALIZER_C_DOUBLE_COMPLEX      MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(double _Complex), C_DOUBLE_COMPLEX)
#define MPI_DATATYPE_INITIALIZER_C_LONG_DOUBLE_COMPLEX MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(sizeof(long double _Complex), C_LONG_DOUBLE_COMPLEX)

#define MPI_DATATYPE_INITIALIZER_BYTE   MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(1, BYTE)
#define MPI_DATATYPE_INITIALIZER_PACKED MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(1, PACKED)

#define MPI_DATATYPE_INITIALIZER_AINT   MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(8, AINT)
#define MPI_DATATYPE_INITIALIZER_OFFSET MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(8, OFFSET)
#define MPI_DATATYPE_INITIALIZER_COUNT  MPI_DATATYPE_INIT_PREDEFINED_DATATYPE(8, COUNT)

#endif /* NANVIX_MPI_DATATYPE_PREDEFINED_H_ */
